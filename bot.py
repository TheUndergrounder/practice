import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, ReplyKeyboardRemove
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram import F
from aiogram import html
from raspisanie import *

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="7265948579:AAGRZ1rwfn19i9KUYzukR7U8M5WfEoXT1ko")
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


mode = "normal"
address = ''
day = ''
teachers_fio = ''
audience=''
teachers_list = load_teachers()

def update_day():
    global day
    try:
        url = "https://guap.ru/rasp/"
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'lxml')
        day=soup.find('em').text[2:]
        print(f"–î–µ–Ω—å –æ–±–Ω–æ–≤–ª–µ–Ω: {day}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–Ω—è: {e}")
def run_scheduler():
    schedule.every().day.at("00:00").do(update_day)
    while True:
        schedule.run_pending()
        time.sleep(1)
def get_main_keyboard():
    kb = [
        [
            InlineKeyboardButton(text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", switch_inline_query_current_chat=""),
            InlineKeyboardButton(text="–ê—É–¥–∏—Ç–æ—Ä–∏–∏", callback_data="auditoriums")
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb), ReplyKeyboardRemove()
def get_back_keyboard(message:str=''):
    kb = [[KeyboardButton(text="–ù–∞–∑–∞–¥")]]
    return ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder=message+" –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'"*(message!='')
    )

@dp.inline_query()
async def inline_query_handler(query: InlineQuery):
    if len(query.query)<1:
        return
    results = []
    matching_teachers = search_teachers(query.query)

    for i, teacher in enumerate(matching_teachers[:50]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results.append(InlineQueryResultArticle(
            id=str(i),
            title=teacher,
            input_message_content=InputTextMessageContent(
                message_text=f"–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {teacher}"
            )
        ))

    await query.answer(results, cache_time=1)

@dp.message(F.text.startswith("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:"))
async def handle_inline_result(message: types.Message):
    teacher = message.text.split(":")[1].strip()
    await show_teacher_schedule(message, teacher)
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard, remove_keyboard = get_main_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=remove_keyboard)
    await message.answer("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", reply_markup=keyboard)



@dp.message(F.text.lower() == "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")
async def cmd_prep(message: types.Message):
    global mode
    mode = "teacher"
    bot_username = await bot.get_me()
    inline_button = InlineKeyboardButton(
        text="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
        switch_inline_query_current_chat=""
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[inline_button]])

    await message.reply(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=keyboard
    )
@dp.message(F.text.lower() == "–Ω–∞–∑–∞–¥")
async def cmd_back(message: types.Message):
    global mode
    mode = "normal"
    keyboard, remove_keyboard = get_main_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=remove_keyboard)
    await message.answer("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", reply_markup=keyboard)

@dp.callback_query(F.data == "auditoriums")
async def process_auditoriums(callback_query: types.CallbackQuery):
    kb = [
        [
            InlineKeyboardButton(text="–ì–∞—Å—Ç–µ–ª–ª–æ 15", callback_data="address:–ì–∞—Å—Ç–µ–ª–ª–æ 15"),
            InlineKeyboardButton(text="–õ–µ–Ω—Å–æ–≤–µ—Ç–∞ 14", callback_data="address:–õ–µ–Ω—Å–æ–≤–µ—Ç–∞ 14"),
        ],
        [
            InlineKeyboardButton(text="–ë. –ú–æ—Ä—Å–∫–∞—è 67", callback_data="address:–ë. –ú–æ—Ä—Å–∫–∞—è 67"),
        ],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å", reply_markup=keyboard)
    await callback_query.answer()
@dp.callback_query(F.data.startswith("address:"))
async def process_address(callback_query: types.CallbackQuery):
    global mode, address
    mode = "auditorium"
    address = callback_query.data.split(":")[1]
    await callback_query.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è {address}")
    await callback_query.answer()

@dp.message(F.text.lower() == "–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_full_schedule(message: types.Message):
    if mode=='full_schedule_prep':
        title = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è <b><u>" + teachers_fio + "</u></b>\n"
        reply = title+get_rasp(teachers_fio)
        await message.reply(reply, parse_mode=ParseMode.HTML, reply_markup=get_back_keyboard())
    elif mode=='full_schedule_audit':
        title = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ <b><u>" + audience + "</u></b>\n"
        reply = title + get_rasp_audit(address, audience)
        if len(reply)>4095:
            half=reply.find('<b><i>–ß—Ç')
            print(reply, len(reply), len(reply[:half]), len(reply[half:]))
            await message.reply(reply[:half], parse_mode=ParseMode.HTML, reply_markup=get_back_keyboard())
            await message.reply(reply[half:], parse_mode=ParseMode.HTML, reply_markup=get_back_keyboard())
        else:
            await message.reply(reply, parse_mode=ParseMode.HTML, reply_markup=get_back_keyboard())
@dp.callback_query(lambda c: c.data and c.data.startswith('teacher:'))
async def process_callback_teacher(callback_query: types.CallbackQuery):
    await callback_query.answer()
    teacher = callback_query.data.split(':')[1]
    await show_teacher_schedule(callback_query.message, teacher)
async def show_teacher_schedule(message: types.Message, teacher: str):
    global mode, teachers_fio
    title = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è <b><u>{teacher}</u></b>\n"
    reply = get_rasp(teacher, day)
    if reply == '':
        reply = '–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π!!' + 'ü•≥'
    else:
        reply = title + reply
    kb = [
        [KeyboardButton(text="–ù–∞–∑–∞–¥"),
         KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ "–ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" –∏–ª–∏ "–Ω–∞–∑–∞–¥"'
    )
    mode = 'full_schedule_prep'
    teachers_fio = teacher
    await message.reply(reply, parse_mode=ParseMode.HTML, reply_markup=keyboard)

@dp.message(F.text)
async def choose_prep(message: types.Message):
    global mode, day, teachers_fio, audience
    if mode == "teacher":
        matching_teachers = search_teachers(message.text)
        if not matching_teachers:
            await message.reply("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é —á–∞—Å—Ç—å —Ñ–∞–º–∏–ª–∏–∏.")
        elif len(matching_teachers) == 1:
            await show_teacher_schedule(message, matching_teachers[0])
        else:
            builder = InlineKeyboardBuilder()
            for teacher in matching_teachers[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ 10 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
                builder.button(text=teacher, callback_data=f"teacher:{teacher}")
            builder.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=builder.as_markup())
    elif mode == 'auditorium' or mode=='full_schedule_audit':
        title = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ <b><u>" + message.text + "</u></b> –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        reply = get_rasp_audit(korpus=address, audience=message.text, today=day)
        if reply == '':
            reply = '–ê—É–¥–∏—Ç–æ—Ä–∏–∏, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            await message.answer_sticker(r'CAACAgIAAxkBAAEG6b5mlTydqVqKBzx6ucCpoTEtn_2DWwACMgADlb9JMp-D9IETtGgoNQQ')
            await message.reply(reply, parse_mode=ParseMode.HTML, reply_markup=get_back_keyboard())

        else:
            reply = title + reply
            kb = [
                [types.KeyboardButton(text="–ù–∞–∑–∞–¥"),
                 types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
                 ]
            ]
            keyboard = types.ReplyKeyboardMarkup(
                keyboard=kb,
                resize_keyboard=True,
                input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ "–ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" –∏–ª–∏ "–Ω–∞–∑–∞–¥"'
            )
            audience=message.text
            mode="full_schedule_audit"
            await message.reply(reply, parse_mode=ParseMode.HTML, reply_markup=keyboard)
    else:
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

async def main():
    threading.Thread(target=run_scheduler).start()
    update_day()
    await bot.delete_webhook(drop_pending_updates=True)

    bot_info = await bot.get_me()
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. Username: @{bot_info.username}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await dp.start_polling(bot, drop_pending_updates=True)

if __name__ == "__main__":
    asyncio.run(main())