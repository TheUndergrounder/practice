import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram import F
from aiogram import html
#from config_reader import config
from raspisanie import *

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="7265948579:AAGRZ1rwfn19i9KUYzukR7U8M5WfEoXT1ko")
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


mode = "normal"
address = ''
day = ''
teachers_fio = ''
audience=''
def update_day():
    global day
    try:
        url = "https://guap.ru/rasp/"
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'lxml')
        day=soup.find('em').text[2:]
        print(f"–î–µ–Ω—å –æ–±–Ω–æ–≤–ª–µ–Ω: {day}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–Ω—è: {e}")
def run_scheduler():
    schedule.every().day.at("00:00").do(update_day)
    while True:
        schedule.run_pending()
        time.sleep(1)
def get_main_keyboard():
    kb = [
        [
            types.KeyboardButton(text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"),
            types.KeyboardButton(text="–ê—É–¥–∏—Ç–æ—Ä–∏–∏")
        ],
    ]
    return types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏"
    )
def get_back_keyboard(mesage:str=''):
    kb = [
        [types.KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ]
    return types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder=mesage+" –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'"*(mesage!='')
    )
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", reply_markup=get_main_keyboard())

@dp.message(F.text.lower() == "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")
async def cmd_prep(message: types.Message):
    global mode
    mode = "teacher"
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", reply_markup=get_back_keyboard('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'))
@dp.message(F.text.lower() == "–Ω–∞–∑–∞–¥")
async def cmd_back(message: types.Message):
    global mode
    mode = "normal"
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=get_main_keyboard())

@dp.message(F.text.lower() == "–∞—É–¥–∏—Ç–æ—Ä–∏–∏")
async def cmd_audit(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text="–ì–∞—Å—Ç–µ–ª–ª–æ 15"),
            types.KeyboardButton(text="–õ–µ–Ω—Å–æ–≤–µ—Ç–∞ 14"),
            types.KeyboardButton(text="–ë. –ú–æ—Ä—Å–∫–∞—è 67"),
            types.KeyboardButton(text="–ù–∞–∑–∞–¥"),
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'"
    )
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å", reply_markup=keyboard)

@dp.message(F.text.lower() == "–≥–∞—Å—Ç–µ–ª–ª–æ 15")
async def cmd_gastello(message: types.Message):
    global mode, address
    mode = "auditorium"
    address = "–ì–∞—Å—Ç–µ–ª–ª–æ 15"
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏", reply_markup=get_back_keyboard())

@dp.message(F.text.lower() == "–ª–µ–Ω—Å–æ–≤–µ—Ç–∞ 14")
async def cmd_lensoveta(message: types.Message):
    global mode, address
    mode = "auditorium"
    address = "–õ–µ–Ω—Å–æ–≤–µ—Ç–∞ 14"
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏", reply_markup=get_back_keyboard())

@dp.message(F.text.lower() == "–±. –º–æ—Ä—Å–∫–∞—è 67")
async def cmd_bm(message: types.Message):
    global mode, address
    mode = "auditorium"
    address = "–ë. –ú–æ—Ä—Å–∫–∞—è 67"
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏", reply_markup=get_back_keyboard())

@dp.message(F.text.lower() == "–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_full_schedule(message: types.Message):
    if mode=='full_schedule_prep':
        title = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è <b><u>" + teachers_fio + "</u></b>\n"
        reply = title+get_rasp(teachers_fio)
        await message.reply(reply, parse_mode=ParseMode.HTML, reply_markup=get_back_keyboard())
    elif mode=='full_schedule_audit':
        title = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ <b><u>" + audience + "</u></b>\n"
        reply = title + get_rasp_audit(address, audience)
        print(len(reply))
        print(reply)
        if len(reply)>4095:
            half=reply.find('<i>–ß–µ—Ç–≤–µ—Ä–≥')
            await message.reply(reply[:half], parse_mode=ParseMode.HTML, reply_markup=get_back_keyboard())
            await message.reply(reply[half:], parse_mode=ParseMode.HTML, reply_markup=get_back_keyboard())
        else:
            await message.reply(reply, parse_mode=ParseMode.HTML, reply_markup=get_back_keyboard())
@dp.message(F.text)
async def choose_prep(message: types.Message):
    global mode, day, teachers_fio, audience
    if mode == "teacher":
        teacher = get_name(message.text)
        if teacher == "":
            await message.reply("–¢–∞–∫–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            title = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è <b><u>" + teacher + "</u></b>\n"
            reply = get_rasp(teacher, day)
            if reply=='':
                reply='–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π!!'+'ü•≥'
            else:
                reply=title+reply
            kb = [
                [types.KeyboardButton(text="–ù–∞–∑–∞–¥"),
                 types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
                 ]
            ]
            keyboard = types.ReplyKeyboardMarkup(
                keyboard=kb,
                resize_keyboard=True,
                input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ "–ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" –∏–ª–∏ "–Ω–∞–∑–∞–¥"'
            )
            mode='full_schedule_prep'
            teachers_fio=teacher
            await message.reply(reply, parse_mode=ParseMode.HTML, reply_markup=keyboard)
    elif mode == 'auditorium' or mode=='full_schedule_audit':
        title = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ <b><u>" + message.text + "</u></b> –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        reply = get_rasp_audit(korpus=address, audience=message.text, today=day)
        if reply == '':
            reply = '—Ç–∞–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            await message.reply(reply, parse_mode=ParseMode.HTML, reply_markup=get_back_keyboard())
        else:
            reply = title + reply
            kb = [
                [types.KeyboardButton(text="–ù–∞–∑–∞–¥"),
                 types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
                 ]
            ]
            keyboard = types.ReplyKeyboardMarkup(
                keyboard=kb,
                resize_keyboard=True,
                input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ "–ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" –∏–ª–∏ "–Ω–∞–∑–∞–¥"'
            )
            audience=message.text
            mode="full_schedule_audit"
            await message.reply(reply, parse_mode=ParseMode.HTML, reply_markup=keyboard)
    else:
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

async def main():
    threading.Thread(target=run_scheduler).start()
    update_day()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())